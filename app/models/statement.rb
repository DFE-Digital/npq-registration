# Statement
#
# * A schedule has many statement
#   -  A cohort/contract can have many statement
# * A statement can have many declaration
# * Not all statements have declarations
# * A statement is comprised of:
#   - service fees
#   - output fee (individual declarations/outputs, uplifts)
#   - vat?
# * Generated by us (DfE)
# * A statement can be ‘frozen’ preventing providers from voiding declarations
#   and initializing clawbacks for any future voids. Refer to mark_as_paid field
#   and logic.
class Statement < ApplicationRecord
  belongs_to :cohort
  belongs_to :lead_provider
  has_many :statement_items
  has_many :contracts

  validates :output_fee, presence: true
  validates :month, numericality: { in: 1..12, only_integer: true }
  validates :year, numericality: { in: 2020..2050, only_integer: true }

  validate :validate_max_statement_items_count

private

  def validate_max_statement_items_count
    if statement_items.count > 2
      errors.add(:statement_items, "cannot have more than two items")
    end
  end
  # "deadline_date" the deadline for the final declaration, if this is missed
  # the declaration will be added to the next statement output instead

  # do we need a flag to differentiate between service statements and output
  # statements? Currently they're set by contract managers, translated to CSV
  # by Shahad and implemented by devs. We need to move this to the admin UI
end
