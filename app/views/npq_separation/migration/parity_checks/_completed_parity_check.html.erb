<h2 class="govuk-heading-l">Completed parity check</h2>

<p class="govuk-body">
  The latest parity check was completed <%= tag.strong(time_ago_in_words(@parity_check_completed_at)) %> ago.<br>
  The parity check took <%= tag.strong(ActiveSupport::Duration.build((@parity_check_completed_at - @parity_check_started_at).to_i).inspect) %> to complete.
</p>

<canvas id="response-time-chart"></canvas>

<%= govuk_accordion do |accordion|
  @response_comparisons_by_lead_provider.each do |lead_provider_name, comparisons|
    accordion.with_section(heading_text: lead_provider_name, expanded: comparisons.any?(&:different?)) do
      govuk_task_list do |task_list|
        comparisons.each do |comparison|
          task_list.with_item do |item|
            item.with_title(text: comparison.description, hint: response_comparison_performance(comparison), href: response_comparison_detail_path(comparison))
            item.with_status(text: response_comparison_status_tag(comparison.different?))
          end
        end
      end
    end
  end
end %>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
  const ctx = document.getElementById("response-time-chart")
  const ecfAvgData = <%= @average_response_times_by_path.values.map { |h| h[:ecf][:avg] } %>
  const npqAvgData = <%= @average_response_times_by_path.values.map { |h| h[:npq][:avg] } %>

  const ecfMinData = <%= @average_response_times_by_path.values.map { |h| h[:ecf][:min] } %>
  const npqMinData = <%= @average_response_times_by_path.values.map { |h| h[:npq][:min] } %>

  const ecfMaxData = <%= @average_response_times_by_path.values.map { |h| h[:ecf][:max] } %>
  const npqMaxData = <%= @average_response_times_by_path.values.map { |h| h[:npq][:max] } %>

  new Chart(ctx, {
    type: "bar",
    data: {
      labels: ["<%= sanitize(@average_response_times_by_path.keys.join("\", \"")) %>"],
      datasets: [
        {
          label: "ECF Avg",
          data: ecfAvgData,
          borderWidth: 1,
          backgroundColor: "rgba(255, 99, 132, 0.5)",
          borderColor: "rgba(255, 99, 132, 1)",
          order: 1,
        },
        {
          label: "NPQ Avg",
          data: npqAvgData,
          borderWidth: 1,
          backgroundColor: "rgba(54, 162, 235, 0.5)",
          borderColor: "rgba(54, 162, 235, 1)",
          order: 1,
        },
        {
          label: "ECF Min",
          type: "line",
          data: ecfMinData,
          pointBackgroundColor: "rgba(255, 99, 132, 1)",
          backgroundColor: "rgba(255, 99, 132, 0.2)",
          borderColor: "rgba(255, 99, 132, 0.5)",
          fill: "+1",
          borderWidth: 1,
          pointRadius: 5,
        },
        {
          label: "ECF Max",
          type: "line",
          data: ecfMaxData,
          pointBackgroundColor: "rgba(255, 99, 132, 1)",
          backgroundColor: "rgba(255, 99, 132, 0.2)",
          borderColor: "rgba(255, 99, 132, 0.5)",
          borderWidth: 1,
          pointRadius: 5,
        },
        {
          label: "NPQ Min",
          type: "line",
          data: npqMinData,
          pointBackgroundColor: "rgba(54, 162, 235, 1)",
          backgroundColor: "rgba(54, 162, 235, 0.2)",
          borderColor: "rgba(54, 162, 235, 0.5)",
          fill: "+1",
          borderWidth: 1,
          pointRadius: 5,
        },
        {
          label: "NPQ Max",
          type: "line",
          data: npqMaxData,
          pointBackgroundColor: "rgba(54, 162, 235, 1)",
          backgroundColor: "rgba(54, 162, 235, 0.2)",
          borderColor: "rgba(54, 162, 235, 0.5)",
          borderWidth: 1,
          pointRadius: 5,
        }
    ]
    },
    options: {
      plugins: {
        title: {
          display: true,
          text: "Average response times by path"
        },
        legend: {
          labels: {
            filter: (label) => label.text.includes("Avg")
          }
        },
      },
      responsive: true,
      scales: {
        y: {
          ticks: {
            callback: ms => {
              if (ms < 1000) {
                return `${ms}ms`
              } else if (ms < 60000) {
                return `${ms / 1000}s`
              } else {
                return `${Math.floor(ms / 60000)}m ${ms % 60000 / 1000}s`
              }
            }
          }
        },
      }
    }
  })
</script>
